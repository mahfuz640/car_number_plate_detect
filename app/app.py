import streamlit as st
import cv2
import easyocr
import pandas as pd
from ultralytics import YOLO
import tempfile
import os

# ======================
# Allowed List
# ======================
districts = [
    "‡¶¢‡¶æ‡¶ï‡¶æ","‡¶¢‡¶æ‡¶ï‡¶æ ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡ßã","‡¶ü‡¶æ‡¶Ç‡¶ó‡¶æ‡¶á‡¶≤","‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡¶æ‡¶Æ","‡¶ö‡¶ü‡ßç‡¶∞ ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡ßã","‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ","‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡ßã",
    "‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤","‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤ ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡ßã","‡¶ï‡¶ï‡ßç‡¶∏‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞","‡¶®‡ßá‡¶§‡ßç‡¶∞‡¶ï‡ßã‡¶£‡¶æ","‡¶∞‡¶Ç‡¶™‡ßÅ‡¶∞","‡¶∞‡¶æ‡¶ú ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡ßã","‡¶≠‡ßã‡¶≤‡¶æ",
    "‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ","‡¶ï‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø‡ßü‡¶æ","‡¶®‡¶æ‡¶∞‡¶æ‡ßü‡¶£‡¶ó‡¶û‡ßç‡¶ú","‡¶¨‡¶ó‡ßÅ‡ßú‡¶æ","‡¶∏‡¶ø‡¶∞‡¶æ‡¶ú‡¶ó‡¶û‡ßç‡¶ú","‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ","‡¶Æ‡ßü‡¶Æ‡¶®‡¶∏‡¶ø‡¶Ç‡¶π",
    "‡¶ù‡¶ø‡¶®‡¶æ‡¶á‡¶¶‡¶π","‡¶∏‡¶ø‡¶≤‡ßá‡¶ü","‡¶π‡¶¨‡¶ø‡¶ó‡¶û‡ßç‡¶ú","‡¶®‡¶æ‡¶ü‡ßã‡¶∞","‡¶™‡¶æ‡¶¨‡¶®‡¶æ","‡¶Ø‡ßã‡¶∂‡¶∞","‡¶¨‡¶∞‡¶ó‡ßÅ‡¶®‡¶æ","‡¶®‡ßÄ‡¶≤‡¶´‡¶æ‡¶Æ‡¶æ‡¶∞‡ßÄ",
    "‡¶™‡¶ü‡ßÅ‡ßü‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ","‡¶ú‡¶æ‡¶Æ‡¶æ‡¶≤‡¶™‡ßÅ‡¶∞","‡¶™‡¶ø‡¶∞‡ßã‡¶ú‡¶™‡ßÅ‡¶∞","‡¶¨‡ßç‡¶∞‡¶æ‡¶ï‡ßç‡¶∑‡¶£‡¶¨‡¶æ‡ßú‡¶ø‡ßü‡¶æ","‡¶Æ‡¶æ‡¶®‡¶ø‡¶ï‡¶ó‡¶û‡ßç‡¶ú","‡¶®‡ßã‡ßü‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ",
    "‡¶¨‡¶æ‡¶ó‡ßá‡¶∞‡¶π‡¶æ‡¶ü","‡¶∏‡ßÅ‡¶®‡¶æ‡¶Æ‡¶ó‡¶û‡ßç‡¶ú","‡¶ö‡ßÅ‡ßü‡¶æ‡¶°‡¶æ‡¶Ç‡¶ó‡¶æ","‡¶ó‡ßã‡¶™‡¶æ‡¶≤‡¶ó‡¶û‡ßç‡¶ú","‡¶™‡¶û‡ßç‡¶ö‡¶ó‡¶°‡¶º","‡¶≤‡¶ï‡ßç‡¶∑‡ßÄ‡¶™‡ßÅ‡¶∞","‡¶∂‡ßá‡¶∞‡¶™‡ßÅ‡¶∞",
    "‡¶ù‡¶æ‡¶≤‡¶ï‡¶æ‡¶†‡¶ø","‡¶ñ‡¶æ‡¶ó‡ßú‡¶æ‡¶õ‡ßú‡¶ø","‡¶ï‡¶ø‡¶∂‡ßã‡¶∞‡¶ó‡¶û‡ßç‡¶ú","‡¶∏‡¶æ‡¶§‡¶ï‡ßç‡¶∑‡ßÄ‡¶∞‡¶æ","‡¶®‡¶∞‡¶∏‡¶ø‡¶Ç‡¶¶‡ßÄ","‡¶Æ‡ßå‡¶≤‡¶≠‡ßÄ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞","‡¶ï‡ßú‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ",
    "‡¶∂‡ßú‡¶ø‡ßü‡¶§‡¶™‡ßÅ‡¶∞","‡¶Æ‡¶æ‡¶¶‡¶æ‡¶∞‡ßÄ‡¶™‡ßÅ‡¶∞","‡¶ó‡¶æ‡¶á‡¶¨‡¶æ‡¶®‡ßç‡¶ß‡¶æ","‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡ßú‡ßÄ","‡¶®‡¶ì‡ßü‡¶æ‡¶¨‡¶ó‡¶û‡ßç‡¶ú","‡¶∞‡¶æ‡¶ô‡ßç‡¶ó‡¶æ‡¶Æ‡¶æ‡¶ü‡¶ø","‡¶ö‡ßÅ‡ßü‡¶æ‡¶°‡¶æ‡¶ô‡ßç‡¶ó‡¶æ",
    "‡¶Æ‡ßÅ‡¶®‡ßç‡¶∏‡ßÄ‡¶ó‡¶û‡ßç‡¶ú","‡¶®‡¶ì‡¶ó‡¶æ‡¶Å","‡¶ó‡¶æ‡¶ú‡ßÄ‡¶™‡ßÅ‡¶∞","‡¶Æ‡ßá‡¶π‡ßá‡¶∞‡¶™‡ßÅ‡¶∞","‡¶ö‡¶æ‡¶Å‡¶™‡¶æ‡¶á‡¶®‡¶¨‡¶æ‡¶¨‡¶ó‡¶û‡ßç‡¶ú","‡¶¨‡¶æ‡¶®‡ßç‡¶¶‡¶∞‡¶¨‡¶æ‡¶®","‡¶ö‡¶æ‡¶Å‡¶¶‡¶™‡ßÅ‡¶∞",
    "‡¶ú‡ßü‡¶™‡ßÅ‡¶∞‡¶π‡¶æ‡¶ü","‡¶®‡¶°‡¶º‡¶æ‡¶á‡¶≤","‡¶´‡¶∞‡¶ø‡¶¶‡¶™‡ßÅ‡¶∞","‡¶†‡¶æ‡¶ï‡ßÅ‡¶∞‡¶ó‡¶æ‡¶Å‡¶ì","‡¶≤‡¶æ‡¶≤‡¶Æ‡¶®‡¶ø‡¶∞‡¶π‡¶æ‡¶ü"
]

allowed_chars = [
    "‡¶ó","‡¶π","‡¶≤","‡¶ò","‡¶ö","‡¶ü","‡¶•","‡¶è",
    "‡¶ï","‡¶ñ","‡¶≠","‡¶™","‡¶õ","‡¶ú","‡¶ù","‡¶¨",
    "‡¶∏","‡¶§","‡¶¶","‡¶´","‡¶†","‡¶Æ","‡¶®","‡¶Ö",
    "‡¶°","‡¶â","‡¶¢","‡¶∂","‡¶á","‡¶Ø","‡¶∞"
]

allowed_digits = [
    "‡ß¶","‡ßß","‡ß®","‡ß©","‡ß™","‡ß´","‡ß¨","‡ß≠","‡ßÆ","‡ßØ"
]

def filter_text(text: str) -> bool:
    text = text.strip()
    if text in districts:   # Full district match
        return True
    if text in allowed_chars:   # Single allowed char
        return True
    if all(ch in allowed_digits for ch in text):   # Digits only
        return True
    return False

# ======================
# Streamlit UI
# ======================
st.set_page_config(page_title="Bangla Number Plate OCR", layout="wide")
st.title("üìë Bangla Number Plate OCR Detection")

col1, col2 = st.columns([2, 1])

with col2:
    st.markdown("### ‚öôÔ∏è Options")
    frame_skip = st.slider("Frame Skip (Video)", 1, 30, 10)
    show_raw = st.checkbox("Show Raw OCR Results (Unfiltered)", False)

# Load YOLO model
model = YOLO("best.pt")

# EasyOCR reader
reader = easyocr.Reader(['en', 'bn'])

# Upload file
uploaded_file = st.file_uploader("üì§ Upload Image or Video", type=["jpg", "jpeg", "png", "mp4", "avi", "mkv"])

if uploaded_file:
    temp_path = os.path.join(tempfile.gettempdir(), uploaded_file.name)
    with open(temp_path, "wb") as f:
        f.write(uploaded_file.read())

    results_list = []
    unique_detected = set()   # ‚úÖ prevent duplicate

    # ----------------------
    # Image Processing
    # ----------------------
    if uploaded_file.name.lower().endswith((".jpg", ".jpeg", ".png")):
        with col1:
            st.image(temp_path, caption="Uploaded Image", use_column_width=True)

        results = model(temp_path)
        img = cv2.imread(temp_path)

        for r in results:
            boxes = r.boxes.xyxy.cpu().numpy()
            for box in boxes:
                x1, y1, x2, y2 = map(int, box)
                roi = img[y1:y2, x1:x2]
                ocr_result = reader.readtext(roi)
                for (_, text, _) in ocr_result:
                    text = text.strip()
                    if filter_text(text):
                        if text not in unique_detected:
                            results_list.append([text])
                            unique_detected.add(text)
                    elif show_raw:
                        if text not in unique_detected:
                            results_list.append([text])
                            unique_detected.add(text)

    # ----------------------
    # Video Processing
    # ----------------------
    elif uploaded_file.name.lower().endswith((".mp4", ".avi", ".mkv")):
        with col1:
            st.video(temp_path)

        cap = cv2.VideoCapture(temp_path)
        frame_count = 0
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            frame_count += 1
            if frame_count % frame_skip == 0:  # ‡¶™‡ßç‡¶∞‡¶§‡¶ø n ‡¶´‡ßç‡¶∞‡ßá‡¶Æ‡ßá OCR
                results = model(frame)
                for r in results:
                    boxes = r.boxes.xyxy.cpu().numpy()
                    for box in boxes:
                        x1, y1, x2, y2 = map(int, box)
                        roi = frame[y1:y2, x1:x2]
                        ocr_result = reader.readtext(roi)
                        for (_, text, _) in ocr_result:
                            text = text.strip()
                            if filter_text(text):
                                if text not in unique_detected:   # ‚úÖ ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞‡¶á detect ‡¶π‡¶¨‡ßá
                                    results_list.append([text])
                                    unique_detected.add(text)
                            elif show_raw:
                                if text not in unique_detected:
                                    results_list.append([text])
                                    unique_detected.add(text)
        cap.release()

    # ----------------------
    # Show Results
    # ----------------------
    if results_list:
        df = pd.DataFrame(results_list, columns=["Detected Text"])
        st.subheader("üìå OCR Results")
        st.dataframe(df)

        csv = df.to_csv(index=False, encoding="utf-8-sig").encode("utf-8-sig")
        st.download_button("‚¨áÔ∏è Download CSV", csv, "ocr_results.csv", "text/csv")
    else:
        st.warning("‚ö†Ô∏è No valid text detected!")
